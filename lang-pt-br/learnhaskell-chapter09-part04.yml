title: Aleatoriedade

text: Muitas vezes quando esta programando, você precisa pegar dados aleatórios. Talvez você esteja fazendo um jogo onde um dado precisa ser jogado ou que você precisa gerar alguns dados de teste para testar seu programa. Há uma série de usos para dados aleatórios quando estiver programando. Bem, atualmente, pseudoaleatório, porque todos nós sabemos que a única verdadeira fonte de aleatoriedade é um macaco em um monociclo com um queijo em uma mão e a outra na bunda. Nesta seção, vamos dar uma olhada em como fazer Haskell gerar dados aparentemente aleatórios.

Na maioria das outras linguagens de programação, você tem funções que lhe dar de volta um número aleatório. Cada vez que você chama essa função, você recebe de volta um número aleatório diferente(espero). E sobre Haskell? Well, lembra, Haskell é uma linguagem funcional pura. O que isto significa é que ele tem transparência referencial. O que ISTO significa é que uma função, se dado os mesmos parâmetros duas vezes, deve produzir o mesmo resultado duas vezes. Isso é muito legal, pois nos permite raciocinar de forma diferente sobre os programas e que nos permite adiar a avaliação até que realmente precisamos dele. Se eu chamar uma função, Eu posso ter certeza que ele não vai fazer qualquer coisa engraçada antes de me dar os resultados. Tudo o que importa são os resultados. No entanto, isso faz com que seja um pouco complicado para obter números aleatórios. Se eu tenho uma função como esta:




Ele não é muito útil como uma função de número aleatório, porque ele vai sempre retornar [code]4[/code], mesmo que eu posso garantir que o 4 é completamente aleatório, porque eu usei um dado para determinar ele.

Como outras linguagens fazem números aparentemente aleatórios? Bem, eles pegam várias informações do seu computador, como a hora atual, quanto e onde você moveu o mouse e que tipo de ruídos que você fez atrás de seu computador e com base nisso, dar um número que parece muito aleatório. A combinação desses fatores (que aleatoriedade) é provavelmente diferente em um determinado momento no tempo, de modo a obter um número aleatório diferente.

Ah. Assim em Haskell, podemos fazer um número aleatório, em seguida, se fizermos uma função que recebe como parâmetro essa aleatoriedade e com base nisso retorna um número (ou outro tipo de dados).

Digite o [code]System.Random[/code] módulo. Ele tem todas as funções que satisfazem nossa necessidade de aleatoriedade. Vamos mergulhar em uma das funções ele exporta depois, isto é [function]random[/function]. este é o seu tipo: [code]random :: (RandomGen g, Random a) =&gt; g -&gt; (a, g)[/code]. Opa! Alguns novos tipos de classes neste tipo de declaração por aqui! O [class]RandomGen[/class] tipo da classe é para tipos que podem atuar como fontes de aleatoriedade. O [class]Random[/class] tipo da classe é para coisas que podem assumir valores aleatórios. Um valor booleano pode assumir um valor aleatório, isto é [code]True[/code] ou [code]False[/code]. Um número também pode assumir uma infinidade de valores aleatórios diferentes. Pode uma função assumir um valor aleatório? Eu não penso assim, provavelmente não! Se tentarmos traduzir a declaração de tipo de [code]random[/code] para Inglês, temos algo como: é preciso um gerador aleatório (essa é a nossa fonte de aleatoriedade) e retorna um valor aleatório e um novo gerador aleatório. Por que também retornam um novo gerador, bem como um valor aleatório? Bem, veremos em um momento.

Para utilizar nossa [code]random[/code] função, temos que obter em nossas mãos um desses geradores aleatórios. O [code]System.Random[/code] módulo exporta um tipo fresco, isto é <span class="label type">StdGen[/code] que é uma instância do [code]RandomGen[/code] tipo de classe. Podemos fazer um [code]StdGen[/code] manualmente ou podemos dizer ao sistema que nos dê um baseado em uma infinidade de tipo de coisas aleatórias.

Para fazer manualmente um gerador aleatório, use a função [function]mkStdGen[/function]. Tem um tipo [code]mkStdGen :: Int -&gt; StdGen[/code]. ele pega um inteiro e com base nesse, dá-nos um gerador aleatório. Certo então, vamos tentar usar [code]random[/code] e [code]mkStdGen[/code] para obter um número (quase aleatório).





O que é isto? Ah, certo, a função [code]random[/code] pode retornar um valor de qualquer tipo, que faz parte do [code]Random[/code] type classe, por isso temos que informar Haskell que TIPO de tipo que queremos. Também não vamos esquecer que ele retorna um valor aleatório e um gerador aleatório em um par.





Finalmente! Um número que parece meio aleatório! O primeiro componente da tupla é o nosso número, enquanto que o segundo componente é uma representação textual do nosso novo gerador aleatório. O que acontece se nós chamamos [code]random[/code] com o mesmo gerador aleatório novamente?




Claro. O mesmo resultado para os mesmos parâmetros. Então, vamos tentar dar-lhe um gerador aleatório diferente como parâmetro.




Certo, legal, excelente, um número diferente. Podemos usar o comentário de tipo para obter diferentes tipos de volta a partir dessa função.




Vamos fazer uma função que simula jogar uma moeda três vezes. Se [code]random[/code] não retornou um novo gerador, juntamente com um valor aleatório, nós teríamos que fazer esta função levar três geradores aleatórios como um parâmetro e, em seguida, retornar aos lançamentos de moeda para cada um deles. Mas isso soa mal, porque se um gerador pode fazer um valor aleatório de tipo [code]Int[/code] (o qual pode assumir uma abundância de valores diferentes), ele deve ser capaz de fazer três lançamentos de moeda (que pode assumir precisamente oito combinações). Portanto, este é o lugar onde [code]random[/code] retornar um novo gerador, juntamente com um valor realmente vem a calhar.

Vamos representar uma moeda com um simples [code]Bool[/code]. [code]True[/code] é coroa, [code]False[/code] é cara.






Chamamos [code]random[/code] com o gerador temos como parâmetro para obter uma moeda e um novo gerador. Então, nós chamamos de novo, só que desta vez com o nosso novo gerador, para obter a segunda moeda. Fazemos o mesmo para a terceira moeda. Se tivéssemos chamado com o mesmo gerador de cada vez, todas as moedas teriam o mesmo valor e nós só seríamos capazes de obter [code](False, False, False)[/code] ou [code](True, True, True)[/code] como resultado.





Observe que nós não temos que fazer [code]random gen :: (Bool, StdGen)[/code]. Isso é porque nós já especificado que nós queremos booleanos na declaração do tipo da função. É por isso que Haskell pode-se inferir que queremos um valor booleano, neste caso.

Então, o que acontece se deseja inverter quatro moedas? Ou cinco? Bem, há uma função chamada [function]randoms[/function] que leva um gerador e devolve uma sequência infinita de valores com base nesse gerador.





Por que não [code]randoms[/code] retornar um novo gerador, bem como uma lista? Poderíamos implementar a função [code]randoms[/code] muito facilmente como esta:







Uma definição recursiva. Ficamos com um valor aleatório e um novo gerador do gerador de corrente e, em seguida, faça uma lista que tem o valor de sua cabeça e números aleatórios com base no novo gerador como a cauda. Porque temos que ser capaz de gerar potencialmente uma quantidade infinita de números, não podemos dar o novo gerador aleatório de volta.

Nós poderíamos fazer uma função que gera um fluxo finito de números e um novo gerador como esta:





Novamente, uma definição recursiva. Nós dizemos que, se quisermos 0 números, nós apenas retornar uma lista vazia e o gerador que nos foi dado. Para qualquer outro número de valores aleatórios, que primeiro obtemos um número aleatório e um novo gerador. Esse será o cabeça. Então dizemos que a cauda será <i>n - 1</i> números gerados com o novo gerador. Então voltamos a cabeça e o resto da lista se juntou e o gerador final que temos de obter os <i>n - 1</i> números aleatórios.

E se queremos um valor aleatório em algum tipo de intervalo? Todos os números inteiros aleatórios até agora foram escandalosamente grande ou pequeno. E se nós queremos para jogar um dado? Bem, usamos [function]randomR[/function] para esse propósito. Ela tem um tipo de [code]randomR :: (RandomGen g, Random a) :: (a, a) -&gt; g -&gt; (a, g)[/code], significando que é um tipo como [code]random[/code], só toma como seu primeiro parâmetro um par de valores que definem os limites inferior e superior e o valor final produzido será dentro desses limites.






Há também [function]randomRs[/function], que produz um fluxo de valores aleatórios dentro de nossos intervalos definidos. verifique isto:



Legal, se parece com uma senha super secreta ou algo assim.

Você pode estar se perguntando, o que esta secção tem a ver com I/O de qualquer maneira? Nós não fizemos nada a respeito I/O até agora. Bem, até agora nós sempre fizemos o nosso gerador de números aleatórios manualmente, fazendo-o com algum inteiro arbitrário. O problema é, se fizermos isso em nossos programas reais, eles sempre retornam os mesmos números aleatórios, o que não é bom para nós. É por isso que [code]System.Random[/code] oferece a [function]getStdGen[/function] I/O ação, que tem um tipo de [code]IO StdGen[/code]. Quando o programa é iniciado, ele pede ao sistema por um bom gerador de números aleatórios e armazena este no chamado gerador mundial. [code]getStdGen[/code] você obtém o gerador aleatório global quando você ligá-la para algo.

Aqui está um programa simples que gera uma sequência aleatória.





Tenha cuidado, porém, apenas realizando [code]getStdGen[/code] duas vezes vai pedir ao sistema para o mesmo gerador mundial duas vezes. Se você fizer isso:





Você vai ter a mesma sequência impressa duas vezes! Uma maneira de obter duas cadeias diferentes de comprimento 20 é a criação de um fluxo infinito e, em seguida, tomar os primeiros 20 elementos e imprimi-los em uma linha e, em seguida, tomar o próximo conjunto de 20 elementos e imprimi-los na segunda linha. Para isso, podemos usar a [code]splitAt[/code] função de [code]Data.List[/code], que divide uma lista de alguns índices e retorna uma tupla que tem a primeira parte, como o primeiro componente e a segunda parte como a segunda componente.





Outra forma é usar a ação [function]newStdGen[/function], que divide o nosso gerador aleatório atual em dois geradores. Ele atualiza o gerador aleatório global com um deles e encapsula o outro como seu resultado.





Não só temos um novo gerador aleatório quando ligamos [code]newStdGen[/code] para algo, o global é atualizado assim, portanto se fizermos [code]getStdGen[/code] novamente e vinculá-lo a algo, teremos um gerador que não é o mesmo que [code]gen[/code].

Aqui está um pequeno programa que irá fazer o usuário adivinhar que número o programa está pensando.






Fazemos uma função [code]askForNumber[/code], que leva um gerador de números aleatórios e retorna um I/O ação que irá solicitar ao usuário um número e dizer-lhe se ele adivinhou certo. Nesta função, que primeiro geramos um número aleatório e um novo gerador baseado no gerador que temos como parâmetro e chamá-los [code]randNumber[/code] e [code]newGen[/code]. Vamos dizer que o número gerado foi [code]7[/code]. Então nós dizemos ao usuário para adivinhar qual o número que o programa está pensando. Realizamos [code]getLine[/code] e ligue seu resultado para [code]numberString[/code]. Quando o usuário digita [code]7[/code], [code]numberString[/code] torna-se [code]"7"[/code]. Depois, usamos [code]when[/code] para verificar se a string que o usuário digitou é uma cadeia vazia. Se for, um vazio I/O ação da [code]return ()[/code] é realizada, que efetivamente termina o programa. Se não for, a ação que consiste no <i>do</i> bloco ali se realizaram. Usamos [code]read[/code] na [code]numberString[/code] convertê-la para um número, assim [code]number[/code] é agora [code]7[/code].

<b>Desculpe!</b> Se o usuário dá-nos algumas informações aqui que [code]read[/code] não posso ler (como [code]"haha"[/code]), nosso programa irá falhar com uma mensagem de erro feia. Se você não quer que seu programa falhar com entrada errônea, use [function]reads[/function], que retorna uma lista vazia quando ele não consegue ler uma string. Quando ele consegue, ele retorna uma lista única com uma tupla que tem o nosso valor desejado como um componente e uma string com que ele não consome como o outro.

Vamos verificar se o número que damos como entrada é igual ao gerado aleatoriamente e dar ao usuário a mensagem apropriada. E então chamamos [code]askForNumber[/code] recursivamente, só que desta vez com o novo gerador que temos, o que nos dá uma I/O ação que é igual à que foi realizada, apenas ela depende de um gerador diferente e vamos realizá-la.

[code]main[/code] consiste em apenas obter um gerador aleatório do sistema e chamar [code]askForNumber[/code] com ele para obter a ação inicial.

Aqui está o nosso programa em ação!






Outra maneira de fazer este mesmo programa é assim:





É muito semelhante à versão anterior, só que em vez de fazer uma função que recebe um gerador e, em seguida, chama a si mesmo de forma recursiva com o novo gerador atualizada, nós fazemos todo o trabalho no [code]main[/code]. Depois de dizer ao usuário se eles estavam corretos em sua suposição ou não, nós atualizamos o gerador global e, em seguida, chamar [code]main[/code] novamente. Ambas as abordagens são válidas, mas eu gosto mais do primeiro, uma vez que faz menos coisas em [code]main[/code] e também nos fornece uma função que podemos reutilizar facilmente.
